#!/usr/bin/env python3
"""
Convert seconds into human-readable format or a specific unit.
Supports auto multi-unit breakdown, single-unit output, and a 'max' option picking the largest unit with overflow thresholds:
  - < 90 seconds → seconds
  - < 90 minutes → minutes
  - < 1.5 days → hours
  - otherwise     → days
"""
import argparse
import sys

def round_half_up(n: float) -> int:
    """
    Round a float to nearest integer, with .5 rounding away from zero.
    """
    if n >= 0:
        return int(n + 0.5)
    else:
        return int(n - 0.5)


def format_timespan(seconds: float) -> str:
    """
    Decompose seconds into days, hours, minutes, and seconds for human-friendly output.
    """
    total = int(seconds)
    days, rem = divmod(total, 86400)
    hours, rem = divmod(rem, 3600)
    minutes, secs = divmod(rem, 60)

    parts = []
    if days:
        parts.append(f"{days} day{'s' if days != 1 else ''}")
    if hours:
        parts.append(f"{hours} hour{'s' if hours != 1 else ''}")
    if minutes:
        parts.append(f"{minutes} minute{'s' if minutes != 1 else ''}")
    if secs or not parts:
        parts.append(f"{secs} second{'s' if secs != 1 else ''}")

    return ", ".join(parts)


def main():
    parser = argparse.ArgumentParser(
        description="Convert seconds into human-friendly time spans or a specific unit."
    )
    parser.add_argument(
        "seconds",
        type=float,
        help="Number of seconds to convert"
    )
    parser.add_argument(
        "-u", "--unit",
        choices=["seconds", "minutes", "hours", "days", "auto", "max"],
        default="auto",
        help=(
            "Output only the specified unit (default: auto for multi-unit output). "
            "Use 'max' to pick the largest unit with thresholds: "
            "<90s→seconds, <90m→minutes, <1.5d→hours, otherwise days."
        )
    )
    args = parser.parse_args()

    sec = args.seconds
    unit = args.unit

    unit_map = {
        "seconds": 1,
        "minutes": 60,
        "hours": 3600,
        "days": 86400
    }

    if unit == "auto":
        print(format_timespan(sec))
    elif unit == "max":
        # pick the largest unit with overflow thresholds
        if sec < 90:
            chosen = "seconds"
        elif sec < 90 * 60:
            chosen = "minutes"
        elif sec < 1.5 * 86400:
            chosen = "hours"
        else:
            chosen = "days"
        value = sec / unit_map[chosen]
        rounded = round_half_up(value)
        print(f"{rounded} {chosen}")
    else:
        # single specified unit
        value = sec / unit_map[unit]
        rounded = round_half_up(value)
        print(f"{rounded} {unit}")


if __name__ == "__main__":
    main()
